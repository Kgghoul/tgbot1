import random
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.markdown import bold, text
import logging
import traceback
import datetime  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º
import asyncio

from database import db  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –±–∞–ª–ª–æ–≤ –∑–∞ –∏–≥—Ä—ã
EMOJI_GAME_POINTS = 5
QUIZ_GAME_POINTS = 3

# –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
class GameTracker:
    def __init__(self):
        self.active_game = None  # –¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã: "emoji" –∏–ª–∏ "quiz"
        self.game_chat_id = None  # ID —á–∞—Ç–∞, –≥–¥–µ –∏–¥—ë—Ç –∏–≥—Ä–∞
        self.game_starter_id = None  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∞–ª –∏–≥—Ä—É
        self.game_start_time = None  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        
        # –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        self.user_last_game = {}  # —Å–ª–æ–≤–∞—Ä—å {user_id: {'timestamp': datetime, 'game_type': str}}
        # –í—Ä–µ–º—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏ –∏–≥—Ä –æ–¥–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        self.cooldown_minutes = 60

    def is_game_active(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–∞–∫–∞—è-–ª–∏–±–æ –∏–≥—Ä–∞"""
        return self.active_game is not None

    def start_game(self, game_type, chat_id, user_id):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
        self.active_game = game_type
        self.game_chat_id = chat_id
        self.game_starter_id = user_id
        self.game_start_time = datetime.datetime.now()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        self.user_last_game[user_id] = {
            'timestamp': self.game_start_time,
            'game_type': game_type
        }
        
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –∏–≥—Ä–∞ {game_type} –≤ —á–∞—Ç–µ {chat_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")

    def end_game(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É"""
        if self.active_game:
            logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–≥—Ä–∞ {self.active_game} –≤ —á–∞—Ç–µ {self.game_chat_id}")
            self.active_game = None
            self.game_chat_id = None
            self.game_starter_id = None
            self.game_start_time = None

    def get_game_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ"""
        if not self.is_game_active():
            return "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä"
        
        game_duration = datetime.datetime.now() - self.game_start_time
        minutes = int(game_duration.total_seconds() // 60)
        seconds = int(game_duration.total_seconds() % 60)
        
        game_name = "–£–≥–∞–¥–∞–π –ø–æ —ç–º–æ–¥–∑–∏" if self.active_game == "emoji" else "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞"
        
        return f"–°–µ–π—á–∞—Å –∏–¥—ë—Ç –∏–≥—Ä–∞: {game_name}\n–ó–∞–ø—É—Å—Ç–∏–ª: ID {self.game_starter_id}\n–í—Ä–µ–º—è: {minutes} –º–∏–Ω. {seconds} —Å–µ–∫."
    
    def can_user_start_game(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É (–ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏)"""
        if user_id not in self.user_last_game:
            return True, None
            
        last_game = self.user_last_game[user_id]
        now = datetime.datetime.now()
        time_passed = now - last_game['timestamp']
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞
        cooldown_seconds = self.cooldown_minutes * 60
        seconds_passed = time_passed.total_seconds()
        seconds_left = cooldown_seconds - seconds_passed
        
        if seconds_left <= 0:
            return True, None
            
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –ø—Ä–æ—à–ª–æ, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        minutes_left = int(seconds_left // 60)
        seconds_left = int(seconds_left % 60)
        
        game_type = "–£–≥–∞–¥–∞–π –ø–æ —ç–º–æ–¥–∑–∏" if last_game['game_type'] == "emoji" else "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞"
        
        return False, {
            'minutes': minutes_left,
            'seconds': seconds_left,
            'game_type': game_type,
            'timestamp': last_game['timestamp'].strftime('%H:%M:%S')
        }


# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞ –∏–≥—Ä
game_tracker = GameTracker()

# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–≥—Ä
class GameStates(StatesGroup):
    emoji_game = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã "–£–≥–∞–¥–∞–π –ø–æ —ç–º–æ–¥–∑–∏"
    quiz_game = State()   # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã


# –ò–≥—Ä–∞ "–£–≥–∞–¥–∞–π –ø–æ —ç–º–æ–¥–∑–∏"
class EmojiGame:
    def __init__(self):
        # –°–ª–æ–≤–∞—Ä—å —Å —ç–º–æ–¥–∑–∏-–∑–∞–≥–∞–¥–∫–∞–º–∏
        self.emoji_riddles = {
            "üßô‚Äç‚ôÇÔ∏èüìì‚ö°üîÆ": "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä",
            "ü¶Åüëëüåç": "–ö–æ—Ä–æ–ª—å –õ–µ–≤",
            "üë∏‚ùÑÔ∏è‚õÑ": "–•–æ–ª–æ–¥–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ",
            "üë†üßö‚Äç‚ôÄÔ∏èüéÉ": "–ó–æ–ª—É—à–∫–∞",
            "üö¢‚ùÑÔ∏èüíë": "–¢–∏—Ç–∞–Ω–∏–∫",
            "üï∑Ô∏èüï∏Ô∏èüë®": "–ß–µ–ª–æ–≤–µ–∫-–ø–∞—É–∫",
            "ü§ñüëΩüí•": "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã",
            "ü¶ñüèùÔ∏èüöô": "–ü–∞—Ä–∫ –Æ—Ä—Å–∫–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞",
            "üß∏üë¶üçØ": "–í–∏–Ω–Ω–∏-–ü—É—Ö",
            "üëªüëªüî´": "–û—Ö–æ—Ç–Ω–∏–∫–∏ –∑–∞ –ø—Ä–∏–≤–∏–¥–µ–Ω–∏—è–º–∏",
            # –ù–æ–≤—ã–µ —Ñ–∏–ª—å–º—ã
            "üë®‚Äçüë©‚Äçüëßüì¶üè†": "–í–≤–µ—Ä—Ö",
            "üß†üò¢üò°üòÑ": "–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞",
            "ü§µüî´üï¥Ô∏è": "–î–∂–µ–π–º—Å –ë–æ–Ω–¥",
            "üîçüß©üïµÔ∏è": "–®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å",
            "üëëüíçüßô‚Äç‚ôÇÔ∏è": "–í–ª–∞—Å—Ç–µ–ª–∏–Ω –∫–æ–ª–µ—Ü",
            "ü§ñ‚ù§Ô∏èüåé": "–í–ê–õ–õ-–ò",
            "ü¶áüÉèüåÉ": "–ë—ç—Ç–º–µ–Ω",
            "ü¶ïü¶ñüåã": "–ú–∏—Ä –Æ—Ä—Å–∫–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞",
            "üßú‚Äç‚ôÄÔ∏èüê†üåä": "–†—É—Å–∞–ª–æ—á–∫–∞",
            "üî¥‚öîÔ∏èüëΩ": "–ó–≤–µ–∑–¥–Ω—ã–µ –≤–æ–π–Ω—ã",
            # –ò–≥—Ä—ã
            "üçÑüë®üê¢": "–ú–∞—Ä–∏–æ",
            "‚õèÔ∏èüå≥üß±": "Minecraft",
            "üî´üéÆüéñÔ∏è": "Call of Duty",
            "üöóüèéÔ∏èüí®": "Need for Speed",
            "üèÜ‚öΩüéÆ": "FIFA",
            "üßô‚Äç‚ôÇÔ∏èüê≤üëë": "Skyrim",
            "üßüüî´üèôÔ∏è": "Resident Evil",
            "üó°Ô∏èüõ°Ô∏èüêâ": "Dark Souls",
            "ü§ñü¶æü§Ø": "Cyberpunk 2077",
            "üèùÔ∏èüè¥‚Äç‚ò†Ô∏è‚öì": "Assassin's Creed: Black Flag",
            # –ú—É–ª—å—Ç—Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã
            "üü°üë®‚Äçüë©‚Äçüëß‚Äçüë¶üç©": "–°–∏–º–ø—Å–æ–Ω—ã",
            "üë®‚Äçüî¨üë¶üî¨": "–†–∏–∫ –∏ –ú–æ—Ä—Ç–∏",
            "üè∞üêâüëë": "–ò–≥—Ä–∞ –ø—Ä–µ—Å—Ç–æ–ª–æ–≤",
            "üß™üë®‚Äçüî¨üíä": "–í–æ –≤—Å–µ —Ç—è–∂–∫–∏–µ",
            "üëΩüëßüö≤": "–û—á–µ–Ω—å —Å—Ç—Ä–∞–Ω–Ω—ã–µ –¥–µ–ª–∞",
            "ü§†üåµüê¥": "–ö–æ–≤–±–æ–π –ë–∏–±–æ–ø",
            "üëëüë∏üèπ": "–ú–µ—Ä–∏–¥–∞",
            "üë®‚Äçüë©‚Äçüëß‚Äçüë¶üè†üëª": "–î–æ–º —Å–æ–≤—ã",
            "üêºü•ãüêØ": "–ö—É–Ω–≥-—Ñ—É –ü–∞–Ω–¥–∞",
            "üî•üå™Ô∏èüíß": "–ê–≤–∞—Ç–∞—Ä: –õ–µ–≥–µ–Ω–¥–∞ –æ–± –ê–∞–Ω–≥–µ"
        }
        self.current_riddle = None
        self.current_answer = None
        
    def get_random_riddle(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —ç–º–æ–¥–∑–∏-–∑–∞–≥–∞–¥–∫—É"""
        try:
            riddles_list = list(self.emoji_riddles.items())
            if not riddles_list:
                logger.error("–°–ø–∏—Å–æ–∫ –∑–∞–≥–∞–¥–æ–∫ –ø—É—Å—Ç!")
                return "‚ùì", "–û—à–∏–±–∫–∞"
            
            selected = random.choice(riddles_list)
            self.current_riddle, self.current_answer = selected
            logger.debug(f"–í—ã–±—Ä–∞–Ω–∞ –∑–∞–≥–∞–¥–∫–∞: {self.current_riddle} -> {self.current_answer}")
            return self.current_riddle
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–≥–∞–¥–∫–∏: {e}")
            self.current_riddle = "‚ùì"
            self.current_answer = "–û—à–∏–±–∫–∞"
            return self.current_riddle
    
    def check_answer(self, user_answer):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.current_answer:
            return False
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç—ã –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        return user_answer.lower() == self.current_answer.lower()


# –í–∏–∫—Ç–æ—Ä–∏–Ω–∞
class QuizGame:
    def __init__(self):
        # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        self.questions = [
            {
                "question": "–ö–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π –ø–æ –ø–ª–æ—â–∞–¥–∏?",
                "options": ["–ö–∏—Ç–∞–π", "–°–®–ê", "–†–æ—Å—Å–∏—è", "–ö–∞–Ω–∞–¥–∞"],
                "correct": 2  # –†–æ—Å—Å–∏—è (–∏–Ω–¥–µ–∫—Å 2)
            },
            {
                "question": "–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?",
                "options": ["7", "8", "9", "10"],
                "correct": 1  # 8 (–∏–Ω–¥–µ–∫—Å 1)
            },
            {
                "question": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª '–í–æ–π–Ω—É –∏ –º–∏—Ä'?",
                "options": ["–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π", "–¢–æ–ª—Å—Ç–æ–π", "–ß–µ—Ö–æ–≤", "–ü—É—à–∫–∏–Ω"],
                "correct": 1  # –¢–æ–ª—Å—Ç–æ–π (–∏–Ω–¥–µ–∫—Å 1)
            },
            {
                "question": "–ö–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç —Å–∏–º–≤–æ–ª 'O' –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü–µ?",
                "options": ["–û–ª–æ–≤–æ", "–û—Å–º–∏–π", "–ö–∏—Å–ª–æ—Ä–æ–¥", "–ó–æ–ª–æ—Ç–æ"],
                "correct": 2  # –ö–∏—Å–ª–æ—Ä–æ–¥ (–∏–Ω–¥–µ–∫—Å 2)
            },
            {
                "question": "–°—Ç–æ–ª–∏—Ü–∞ –Ø–ø–æ–Ω–∏–∏?",
                "options": ["–ö–∏–æ—Ç–æ", "–û—Å–∞–∫–∞", "–¢–æ–∫–∏–æ", "–°–µ—É–ª"],
                "correct": 2  # –¢–æ–∫–∏–æ (–∏–Ω–¥–µ–∫—Å 2)
            },
            # –ù–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∏—Å—Ç–æ—Ä–∏–∏
            {
                "question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –Ω–∞—á–∞–ª–∞—Å—å –í—Ç–æ—Ä–∞—è –º–∏—Ä–æ–≤–∞—è –≤–æ–π–Ω–∞?",
                "options": ["1937", "1939", "1941", "1945"],
                "correct": 1  # 1939 (–∏–Ω–¥–µ–∫—Å 1)
            },
            {
                "question": "–ö—Ç–æ –±—ã–ª –ø–µ—Ä–≤—ã–º –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º –°–®–ê?",
                "options": ["–¢–æ–º–∞—Å –î–∂–µ—Ñ—Ñ–µ—Ä—Å–æ–Ω", "–î–∂–æ—Ä–¥–∂ –í–∞—à–∏–Ω–≥—Ç–æ–Ω", "–ê–≤—Ä–∞–∞–º –õ–∏–Ω–∫–æ–ª—å–Ω", "–î–∂–æ–Ω –ê–¥–∞–º—Å"],
                "correct": 1  # –î–∂–æ—Ä–¥–∂ –í–∞—à–∏–Ω–≥—Ç–æ–Ω (–∏–Ω–¥–µ–∫—Å 1)
            },
            # –í–æ–ø—Ä–æ—Å—ã –ø–æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏
            {
                "question": "–ö–∞–∫–∞—è —Ä–µ–∫–∞ —Å–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è –≤ –º–∏—Ä–µ?",
                "options": ["–ê–º–∞–∑–æ–Ω–∫–∞", "–ù–∏–ª", "–Ø–Ω—Ü–∑—ã", "–ú–∏—Å—Å–∏—Å–∏–ø–∏"],
                "correct": 0  # –ê–º–∞–∑–æ–Ω–∫–∞ (–∏–Ω–¥–µ–∫—Å 0)
            },
            {
                "question": "–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¢–∞–¥–∂-–ú–∞—Ö–∞–ª?",
                "options": ["–ò–Ω–¥–∏—è", "–ü–∞–∫–∏—Å—Ç–∞–Ω", "–ò—Ä–∞–Ω", "–û–ê–≠"],
                "correct": 0  # –ò–Ω–¥–∏—è (–∏–Ω–¥–µ–∫—Å 0)
            },
            # –í–æ–ø—Ä–æ—Å—ã –ø–æ –Ω–∞—É–∫–µ
            {
                "question": "–ö–∞–∫–æ–π –≥–∞–∑ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ –ó–µ–º–ª–∏?",
                "options": ["–ö–∏—Å–ª–æ—Ä–æ–¥", "–£–≥–ª–µ–∫–∏—Å–ª—ã–π –≥–∞–∑", "–ê–∑–æ—Ç", "–ê—Ä–≥–æ–Ω"],
                "correct": 2  # –ê–∑–æ—Ç (–∏–Ω–¥–µ–∫—Å 2)
            },
            {
                "question": "–ö–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —Å–∞–º–æ–µ –±—ã—Å—Ç—Ä–æ–µ –Ω–∞ —Å—É—à–µ?",
                "options": ["–õ–µ–≤", "–ì–µ–ø–∞—Ä–¥", "–ê–Ω—Ç–∏–ª–æ–ø–∞", "–¢–∏–≥—Ä"],
                "correct": 1  # –ì–µ–ø–∞—Ä–¥ (–∏–Ω–¥–µ–∫—Å 1)
            },
            # –í–æ–ø—Ä–æ—Å—ã –ø–æ –∏—Å–∫—É—Å—Å—Ç–≤—É
            {
                "question": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –∫–∞—Ä—Ç–∏–Ω—É '–ó–≤–µ–∑–¥–Ω–∞—è –Ω–æ—á—å'?",
                "options": ["–ö–ª–æ–¥ –ú–æ–Ω–µ", "–ü–∞–±–ª–æ –ü–∏–∫–∞—Å—Å–æ", "–í–∏–Ω—Å–µ–Ω—Ç –í–∞–Ω –ì–æ–≥", "–°–∞–ª—å–≤–∞–¥–æ—Ä –î–∞–ª–∏"],
                "correct": 2  # –í–∞–Ω –ì–æ–≥ (–∏–Ω–¥–µ–∫—Å 2)
            },
            {
                "question": "–ö–∞–∫–æ–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–º–µ–µ—Ç 88 –∫–ª–∞–≤–∏—à?",
                "options": ["–û—Ä–≥–∞–Ω", "–§–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ", "–ê–∫–∫–æ—Ä–¥–µ–æ–Ω", "–°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä"],
                "correct": 1  # –§–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ (–∏–Ω–¥–µ–∫—Å 1)
            },
            # –í–æ–ø—Ä–æ—Å—ã –ø–æ —Å–ø–æ—Ä—Ç—É
            {
                "question": "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –ø—Ä–æ—à–ª–∏ –ø–µ—Ä–≤—ã–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –û–ª–∏–º–ø–∏–π—Å–∫–∏–µ –∏–≥—Ä—ã?",
                "options": ["–ü–∞—Ä–∏–∂", "–ê—Ñ–∏–Ω—ã", "–õ–æ–Ω–¥–æ–Ω", "–†–∏–º"],
                "correct": 1  # –ê—Ñ–∏–Ω—ã (–∏–Ω–¥–µ–∫—Å 1)
            },
            {
                "question": "–°–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ –ø–æ —Ñ—É—Ç–±–æ–ª—É?",
                "options": ["10", "11", "12", "9"],
                "correct": 1  # 11 (–∏–Ω–¥–µ–∫—Å 1)
            },
            # –í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º
            {
                "question": "–ö—Ç–æ –æ—Å–Ω–æ–≤–∞–ª –∫–æ–º–ø–∞–Ω–∏—é Microsoft?",
                "options": ["–°—Ç–∏–≤ –î–∂–æ–±—Å", "–ë–∏–ª–ª –ì–µ–π—Ç—Å", "–ú–∞—Ä–∫ –¶—É–∫–µ—Ä–±–µ—Ä–≥", "–ò–ª–æ–Ω –ú–∞—Å–∫"],
                "correct": 1  # –ë–∏–ª–ª –ì–µ–π—Ç—Å (–∏–Ω–¥–µ–∫—Å 1)
            },
            {
                "question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –±—ã–ª –∑–∞–ø—É—â–µ–Ω –ø–µ—Ä–≤—ã–π iPhone?",
                "options": ["2005", "2007", "2009", "2010"],
                "correct": 1  # 2007 (–∏–Ω–¥–µ–∫—Å 1)
            },
            # –í–æ–ø—Ä–æ—Å—ã –ø–æ –∫–∏–Ω–æ
            {
                "question": "–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –ø–æ–ª—É—á–∏–ª –û—Å–∫–∞—Ä –∑–∞ –ª—É—á—à–∏–π —Ñ–∏–ª—å–º –≤ 2020 –≥–æ–¥—É?",
                "options": ["1917", "–î–∂–æ–∫–µ—Ä", "–ü–∞—Ä–∞–∑–∏—Ç—ã", "–û–¥–Ω–∞–∂–¥—ã –≤ –ì–æ–ª–ª–∏–≤—É–¥–µ"],
                "correct": 2  # –ü–∞—Ä–∞–∑–∏—Ç—ã (–∏–Ω–¥–µ–∫—Å 2)
            },
            {
                "question": "–ö—Ç–æ —Å—ã–≥—Ä–∞–ª –ñ–µ–ª–µ–∑–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –∫–∏–Ω–æ–≤—Å–µ–ª–µ–Ω–Ω–æ–π Marvel?",
                "options": ["–ö—Ä–∏—Å –≠–≤–∞–Ω—Å", "–†–æ–±–µ—Ä—Ç –î–∞—É–Ω–∏-–º–ª–∞–¥—à–∏–π", "–ö—Ä–∏—Å –•–µ–º—Å–≤–æ—Ä—Ç", "–ú–∞—Ä–∫ –†—É—Ñ—Ñ–∞–ª–æ"],
                "correct": 1  # –†–æ–±–µ—Ä—Ç –î–∞—É–Ω–∏-–º–ª–∞–¥—à–∏–π (–∏–Ω–¥–µ–∫—Å 1)
            },
            # –í–æ–ø—Ä–æ—Å—ã –ø–æ –µ–¥–µ
            {
                "question": "–ö–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è —Ä–æ–¥–∏–Ω–æ–π –ø–∏—Ü—Ü—ã?",
                "options": ["–§—Ä–∞–Ω—Ü–∏—è", "–ò—Å–ø–∞–Ω–∏—è", "–ì—Ä–µ—Ü–∏—è", "–ò—Ç–∞–ª–∏—è"],
                "correct": 3  # –ò—Ç–∞–ª–∏—è (–∏–Ω–¥–µ–∫—Å 3)
            },
            {
                "question": "–ò–∑ —á–µ–≥–æ –¥–µ–ª–∞—é—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –≤–∞—Å–∞–±–∏?",
                "options": ["–ò–∑ –≥–æ—Ä—á–∏—Ü—ã", "–ò–∑ —Ö—Ä–µ–Ω–∞", "–ò–∑ –∑–µ–ª–µ–Ω–æ–≥–æ –ø–µ—Ä—Ü–∞", "–ò–∑ –∏–º–±–∏—Ä—è"],
                "correct": 1  # –ò–∑ —Ö—Ä–µ–Ω–∞ (–∏–Ω–¥–µ–∫—Å 1)
            }
        ]
        self.current_question = None
        
    def get_random_question(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å"""
        self.current_question = random.choice(self.questions)
        return self.current_question
    
    def check_answer(self, option_index):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–Ω–¥–µ–∫—Å—É –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        if not self.current_question:
            return False
        
        return option_index == self.current_question["correct"]
    
    def get_formatted_question(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
        if not self.current_question:
            return "–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –≤—ã–±—Ä–∞–Ω"
        
        question_text = bold(self.current_question["question"]) + "\n\n"
        
        for i, option in enumerate(self.current_question["options"]):
            question_text += f"{i+1}. {option}\n"
            
        return question_text


# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∏–≥—Ä
emoji_game = EmojiGame()
quiz_game = QuizGame()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö
async def get_current_state(state: FSMContext):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö"""
    try:
        return await state.get_state()
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}")
        return None

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async def safe_finish_state(state: FSMContext):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data({})
        # –ó–∞—Ç–µ–º –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        logger.debug("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}")
        try:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            current_state = await get_current_state(state)
            if current_state:
                await state.reset_state(with_data=False)
                await state.reset_data()
                logger.debug("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º")
        except Exception as e2:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e2)}")
    
    # –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–≥—Ä
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–≥—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–∞–≥–æ–≤ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ
        emoji_game.current_riddle = None
        emoji_game.current_answer = None
        quiz_game.current_question = None
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É –≤ —Ç—Ä–µ–∫–µ—Ä–µ
        game_tracker.end_game()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /emoji_game
async def cmd_emoji_game(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ emoji_game –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –≤ —á–∞—Ç–µ {chat_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —É–∂–µ –∫–∞–∫–∞—è-—Ç–æ –∏–≥—Ä–∞
        if game_tracker.is_game_active():
            game_info = game_tracker.get_game_info()
            await message.answer(
                f"‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É–∂–µ –∏–¥—ë—Ç –∏–≥—Ä–∞!\n\n{game_info}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã.",
                parse_mode=types.ParseMode.MARKDOWN
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        can_start, cooldown_info = game_tracker.can_user_start_game(user_id)
        if not can_start:
            await message.answer(
                f"‚è≥ –í—ã –∑–∞–ø—É—Å–∫–∞–ª–∏ –∏–≥—Ä—É —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ!\n\n"
                f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∏–≥—Ä–∞: {cooldown_info['game_type']} –≤ {cooldown_info['timestamp']}\n"
                f"–í—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É —á–µ—Ä–µ–∑ {cooldown_info['minutes']} –º–∏–Ω. {cooldown_info['seconds']} —Å–µ–∫.",
                parse_mode=types.ParseMode.MARKDOWN
            )
            return
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = await get_current_state(state)
        if current_state:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º")
            await safe_finish_state(state)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–∞–¥–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
        riddle = emoji_game.get_random_riddle()
        if not riddle or not emoji_game.current_answer:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∑–∞–≥–∞–¥–∫—É")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–≥–∞–¥–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
            return
            
        logger.debug(f"–ó–∞–≥–∞–¥–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {riddle}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–≥—Ä—É –≤ —Ç—Ä–µ–∫–µ—Ä–µ
        game_tracker.start_game("emoji", chat_id, user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response_text = (
            f"üéÆ *–ò–≥—Ä–∞ '–£–≥–∞–¥–∞–π –ø–æ —ç–º–æ–¥–∑–∏'*\n\n"
            f"–£–≥–∞–¥–∞–π—Ç–µ —Ñ–∏–ª—å–º, –∏–≥—Ä—É –∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ —ç–º–æ–¥–∑–∏:\n\n"
            f"{riddle}\n\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç. –£ –≤–∞—Å –µ—Å—Ç—å 3 –ø–æ–ø—ã—Ç–∫–∏!"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(response_text, parse_mode=types.ParseMode.MARKDOWN)
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ
        await state.update_data(attempts=0, riddle=riddle, answer=emoji_game.current_answer)
        await GameStates.emoji_game.set()
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ GameStates.emoji_game —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        error_traceback = traceback.format_exc()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ emoji_game: {e}\n{error_traceback}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await safe_finish_state(state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –∏–≥—Ä–µ Emoji
async def process_emoji_answer(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ emoji_game: {message.text}")
        
        user_answer = message.text
        user_data = await state.get_data()
        attempts = user_data.get('attempts', 0)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–∞–≥–∞–¥–∫–∞ –±—ã–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        if not emoji_game.current_riddle or not emoji_game.current_answer:
            logger.error(f"–¢–µ–∫—É—â–∞—è –∑–∞–≥–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å —Ç–µ–∫—É—â–µ–π –∑–∞–≥–∞–¥–∫–æ–π. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /emoji_game")
            await safe_finish_state(state)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
        if user_answer.lower() == emoji_game.current_answer.lower():
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            points = max(5.0 - attempts * 0.5, 1.0)  # –ú–µ–Ω—å—à–µ –±–∞–ª–ª–æ–≤ –∑–∞ –±–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫
            success, rank_info = await db.add_game_activity(chat_id, user_id, 'emoji_game', points)
            
            # –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            response = (
                f"üéØ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, {message.from_user.full_name}!\n\n"
                f"–ó–∞–≥–∞–¥–∫–∞: {emoji_game.current_riddle}\n"
                f"–û—Ç–≤–µ—Ç: {emoji_game.current_answer}\n"
                f"–ü–æ–ø—ã—Ç–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {attempts + 1}\n"
                f"–ü–æ–ª—É—á–µ–Ω–æ –±–∞–ª–ª–æ–≤: {points}"
            )
            
            await message.answer(response)
            
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
            if success and rank_info and rank_info.get('is_rank_up'):
                old_rank = rank_info.get('old_rank')
                new_rank = rank_info.get('new_rank')
                total_points = rank_info.get('total_points')
                
                congrats_text = (
                    f"üéñ *–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞!* üéñ\n\n"
                    f"üë§ {message.from_user.full_name}\n"
                    f"üìä –ù–∞–±—Ä–∞–Ω–æ {total_points:.1f} –±–∞–ª–ª–æ–≤\n"
                    f"üìà –ü—Ä–æ—à–ª—ã–π —Ä–∞–Ω–≥: {old_rank}\n"
                    f"‚ú® –ù–æ–≤—ã–π —Ä–∞–Ω–≥: {new_rank}\n\n"
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º!"
                )
                
                await message.answer(congrats_text, parse_mode="Markdown")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–≥–∞–¥–∫—É
            emoji_game.current_riddle = None
            emoji_game.current_answer = None
            await safe_finish_state(state)
            
            # –° –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
            if random.random() < 0.3:  # 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥–∞–¥–∫–æ–π
                await message.answer("üí° –î–∞–≤–∞–π—Ç–µ —Å—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑!")
                await cmd_emoji_game(message, state)
        else:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            attempts += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            await state.update_data(attempts=attempts)
            
            # –†–∞–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
            if attempts < 3:
                await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ü–æ–ø—ã—Ç–∫–∞ {attempts}/3")
            else:
                # –ï—Å–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                await message.answer(
                    f"‚õî –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!\n\n"
                    f"–ó–∞–≥–∞–¥–∫–∞: {emoji_game.current_riddle}\n"
                    f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {emoji_game.current_answer}"
                )
                
                # –ù–∞—á–∏—Å–ª—è–µ–º —É—Ç–µ—à–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–ª –∑–∞ —É—á–∞—Å—Ç–∏–µ
                success, rank_info = await db.add_game_activity(chat_id, user_id, 'emoji_game', 0.5)
                
                # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
                if success and rank_info and rank_info.get('is_rank_up'):
                    old_rank = rank_info.get('old_rank')
                    new_rank = rank_info.get('new_rank')
                    total_points = rank_info.get('total_points')
                    
                    congrats_text = (
                        f"üéñ *–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞!* üéñ\n\n"
                        f"üë§ {message.from_user.full_name}\n"
                        f"üìä –ù–∞–±—Ä–∞–Ω–æ {total_points:.1f} –±–∞–ª–ª–æ–≤\n"
                        f"üìà –ü—Ä–æ—à–ª—ã–π —Ä–∞–Ω–≥: {old_rank}\n"
                        f"‚ú® –ù–æ–≤—ã–π —Ä–∞–Ω–≥: {new_rank}\n\n"
                        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º!"
                    )
                    
                    await message.answer(congrats_text, parse_mode="Markdown")
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–≥–∞–¥–∫—É
                emoji_game.current_riddle = None
                emoji_game.current_answer = None
                await safe_finish_state(state)
                
                # –° –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
                if random.random() < 0.3:  # 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                    await asyncio.sleep(2)
                    await message.answer("üí° –î–∞–≤–∞–π—Ç–µ —Å—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑!")
                    await cmd_emoji_game(message, state)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –≤ Emoji-–∏–≥—Ä–µ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ.")
        await safe_finish_state(state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quiz
async def cmd_quiz(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ quiz –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –≤ —á–∞—Ç–µ {chat_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —É–∂–µ –∫–∞–∫–∞—è-—Ç–æ –∏–≥—Ä–∞
        if game_tracker.is_game_active():
            game_info = game_tracker.get_game_info()
            await message.answer(
                f"‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É–∂–µ –∏–¥—ë—Ç –∏–≥—Ä–∞!\n\n{game_info}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã.",
                parse_mode=types.ParseMode.MARKDOWN
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        can_start, cooldown_info = game_tracker.can_user_start_game(user_id)
        if not can_start:
            await message.answer(
                f"‚è≥ –í—ã –∑–∞–ø—É—Å–∫–∞–ª–∏ –∏–≥—Ä—É —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ!\n\n"
                f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∏–≥—Ä–∞: {cooldown_info['game_type']} –≤ {cooldown_info['timestamp']}\n"
                f"–í—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É —á–µ—Ä–µ–∑ {cooldown_info['minutes']} –º–∏–Ω. {cooldown_info['seconds']} —Å–µ–∫.",
                parse_mode=types.ParseMode.MARKDOWN
            )
            return
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        current_state = await get_current_state(state)
        if current_state:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º")
            await safe_finish_state(state)
            
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
        question = quiz_game.get_random_question()
        if not question:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
            return
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–≥—Ä—É –≤ —Ç—Ä–µ–∫–µ—Ä–µ
        game_tracker.start_game("quiz", chat_id, user_id)
            
        formatted_question = quiz_game.get_formatted_question()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        # –í–∞–∂–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        correct_index = question["correct"]
        correct_answer = question["options"][correct_index]
        
        await state.update_data(
            question=question["question"],
            options=question["options"],
            correct=question["correct"],
            correct_answer=correct_answer,
            attempts=0
        )
        
        await message.answer(
            f"üéÆ *–í–∏–∫—Ç–æ—Ä–∏–Ω–∞*\n\n{formatted_question}\n"
            f"–û—Ç–≤–µ—Ç—å—Ç–µ —Ü–∏—Ñ—Ä–æ–π –æ—Ç 1 –¥–æ {len(question['options'])}",
            parse_mode=types.ParseMode.MARKDOWN
        )
        
        await GameStates.quiz_game.set()
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ GameStates.quiz_game —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        error_traceback = traceback.format_exc()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ quiz: {e}\n{error_traceback}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await safe_finish_state(state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ
async def process_quiz_answer(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ quiz: {message.text}")
        
        user_answer = message.text.strip()
        user_data = await state.get_data()
        question = user_data.get('question')
        options = user_data.get('options', [])
        correct = user_data.get('correct')
        correct_answer = user_data.get('correct_answer')
        attempts = user_data.get('attempts', 0)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        if not question or not correct_answer or correct is None or not options:
            logger.error(f"–î–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å —Ç–µ–∫—É—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º. –ù–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /quiz")
            await safe_finish_state(state)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ len(options)
        is_valid_option = False
        option_index = -1
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–∏—Å–ª–æ
            if user_answer.isdigit():
                option_index = int(user_answer) - 1  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ 0-–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
                if 0 <= option_index < len(options):
                    is_valid_option = True
            
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —á–∏—Å–ª–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            if not is_valid_option:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–≤–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º
                for i, option in enumerate(options):
                    if user_answer.lower() == option.lower():
                        option_index = i
                        is_valid_option = True
                        break
        except:
            is_valid_option = False
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
        if not is_valid_option:
            await message.answer(f"‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ —Ü–∏—Ñ—Ä–æ–π –æ—Ç 1 –¥–æ {len(options)} –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
        if option_index == correct:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            points = max(3.0 - attempts * 0.5, 1.0)  # –ú–µ–Ω—å—à–µ –±–∞–ª–ª–æ–≤ –∑–∞ –±–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫
            success, rank_info = await db.add_game_activity(chat_id, user_id, 'quiz', points)
            
            response = (
                f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, {message.from_user.full_name}!\n\n"
                f"–í–æ–ø—Ä–æ—Å: {question}\n"
                f"–û—Ç–≤–µ—Ç: {correct_answer}\n"
                f"–ü–æ–ø—ã—Ç–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {attempts + 1}\n"
                f"–ü–æ–ª—É—á–µ–Ω–æ –±–∞–ª–ª–æ–≤: {points}"
            )
            
            await message.answer(response)
            
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
            if success and rank_info and rank_info.get('is_rank_up'):
                old_rank = rank_info.get('old_rank')
                new_rank = rank_info.get('new_rank')
                total_points = rank_info.get('total_points')
                
                congrats_text = (
                    f"üéñ *–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞!* üéñ\n\n"
                    f"üë§ {message.from_user.full_name}\n"
                    f"üìä –ù–∞–±—Ä–∞–Ω–æ {total_points:.1f} –±–∞–ª–ª–æ–≤\n"
                    f"üìà –ü—Ä–æ—à–ª—ã–π —Ä–∞–Ω–≥: {old_rank}\n"
                    f"‚ú® –ù–æ–≤—ã–π —Ä–∞–Ω–≥: {new_rank}\n\n"
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º!"
                )
                
                await message.answer(congrats_text, parse_mode="Markdown")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await safe_finish_state(state)
            
            # –° –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
            if random.random() < 0.3:  # 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                await asyncio.sleep(2)
                await message.answer("üß† –î–∞–≤–∞–π—Ç–µ —Å—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑!")
                await cmd_quiz(message, state)
        else:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            attempts += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            await state.update_data(attempts=attempts)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ) –≤–∞—Ä–∏–∞–Ω—Ç–∞
            chosen_option = options[option_index]
            
            # –†–∞–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
            if attempts < 3:
                await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏: {chosen_option}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ü–æ–ø—ã—Ç–∫–∞ {attempts}/3")
            else:
                # –ï—Å–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                await message.answer(
                    f"‚õî –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!\n\n"
                    f"–í–æ–ø—Ä–æ—Å: {question}\n"
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {chosen_option}\n"
                    f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"
                )
                
                # –ù–∞—á–∏—Å–ª—è–µ–º —É—Ç–µ—à–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–ª –∑–∞ —É—á–∞—Å—Ç–∏–µ
                success, rank_info = await db.add_game_activity(chat_id, user_id, 'quiz', 0.5)
                
                # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
                if success and rank_info and rank_info.get('is_rank_up'):
                    old_rank = rank_info.get('old_rank')
                    new_rank = rank_info.get('new_rank')
                    total_points = rank_info.get('total_points')
                    
                    congrats_text = (
                        f"üéñ *–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞!* üéñ\n\n"
                        f"üë§ {message.from_user.full_name}\n"
                        f"üìä –ù–∞–±—Ä–∞–Ω–æ {total_points:.1f} –±–∞–ª–ª–æ–≤\n"
                        f"üìà –ü—Ä–æ—à–ª—ã–π —Ä–∞–Ω–≥: {old_rank}\n"
                        f"‚ú® –ù–æ–≤—ã–π —Ä–∞–Ω–≥: {new_rank}\n\n"
                        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º!"
                    )
                    
                    await message.answer(congrats_text, parse_mode="Markdown")
                
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await safe_finish_state(state)
                
                # –° –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
                if random.random() < 0.3:  # 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                    await asyncio.sleep(2)
                    await message.answer("üß† –î–∞–≤–∞–π—Ç–µ —Å—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑!")
                    await cmd_quiz(message, state)
    
    except Exception as e:
        error_traceback = traceback.format_exc()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ: {e}\n{error_traceback}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–Ω–æ–≤–æ.")
        await safe_finish_state(state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
async def cmd_set_cooldown(message: types.Message):
    try:
        from config import ADMIN_IDS
        
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if user_id not in ADMIN_IDS and user_id != message.chat.owner_id:
            await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return
            
        # –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        command_args = message.get_args()
        if not command_args:
            await message.answer(
                f"‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {game_tracker.cooldown_minutes} –º–∏–Ω—É—Ç\n\n"
                f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /set_cooldown [–º–∏–Ω—É—Ç—ã]"
            )
            return
            
        try:
            minutes = int(command_args)
            if minutes < 1:
                await message.answer("‚ùå –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1 –º–∏–Ω—É—Ç—ã.")
                return
                
            old_cooldown = game_tracker.cooldown_minutes
            game_tracker.cooldown_minutes = minutes
            
            await message.answer(
                f"‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n"
                f"–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {old_cooldown} –º–∏–Ω—É—Ç\n"
                f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {minutes} –º–∏–Ω—É—Ç\n\n"
                f"–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–≥—Ä—ã –Ω–µ —á–∞—â–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞ –≤ {minutes} –º–∏–Ω—É—Ç."
            )
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –∏–∑–º–µ–Ω–∏–ª –≤—Ä–µ–º—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å {old_cooldown} –Ω–∞ {minutes} –º–∏–Ω—É—Ç")
            
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∏–Ω—É—Ç–∞—Ö.")
            
    except Exception as e:
        error_traceback = traceback.format_exc()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {e}\n{error_traceback}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.")


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
def register_game_handlers(dp):
    """
    –í–ê–ñ–ù–û: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞–ø—Ä—è–º—É—é –≤ main.py 
    –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
    –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    """
    logger.info("–§—É–Ω–∫—Ü–∏—è register_game_handlers —É—Å—Ç–∞—Ä–µ–ª–∞. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ main.py")
    # –í–ù–ò–ú–ê–ù–ò–ï: –ö–æ–¥ –Ω–∏–∂–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    # –û—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –ü–ï–†–ï–î –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        dp.register_message_handler(cmd_emoji_game, commands=["emoji_game"])
        dp.register_message_handler(cmd_quiz, commands=["quiz"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        dp.register_message_handler(cmd_end_game, commands=["end_game"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        dp.register_message_handler(cmd_set_cooldown, commands=["set_cooldown"])
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        dp.register_message_handler(process_emoji_answer, state=GameStates.emoji_game)
        dp.register_message_handler(process_quiz_answer, state=GameStates.quiz_game)
        
        logger.info("–ò–≥—Ä–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        error_traceback = traceback.format_exc()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–≥—Ä–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}\n{error_traceback}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /end_game –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã (–¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
async def cmd_end_game(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
        if not game_tracker.is_game_active():
            await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä.")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ
        game_info = game_tracker.get_game_info()
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
        game_type = game_tracker.active_game
        game_tracker.end_game()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await safe_finish_state(state)
        
        await message.answer(
            f"‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∏–≥—Ä–µ:\n{game_info}"
        )
        logger.info(f"–ò–≥—Ä–∞ {game_type} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –≤ —á–∞—Ç–µ {chat_id}")
        
    except Exception as e:
        error_traceback = traceback.format_exc()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã: {e}\n{error_traceback}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã.") 