import aiosqlite
import asyncio
import datetime
import logging
from config import DB_PATH

logger = logging.getLogger(__name__)

class Database:
    def __init__(self, db_path=DB_PATH):
        self.db_path = db_path
        
    async def create_tables(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –¢–∞–±–ª–∏—Ü–∞ —á–∞—Ç–æ–≤
                await db.execute(
                    '''
                CREATE TABLE IF NOT EXISTS chats (
                    chat_id INTEGER PRIMARY KEY,
                    title TEXT,
                    joined_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            '''
                )
                
                # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                await db.execute(
                    '''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    joined_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    current_rank TEXT DEFAULT "üîç –ò—Å–∫–∞—Ç–µ–ª—å"
                )
            '''
                )
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–ª–æ–Ω–∫–∏ current_rank –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–µ, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PRAGMA –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–æ–ª–±—Ü–∞—Ö
                    cursor = await db.execute("PRAGMA table_info(users)")
                    columns = await cursor.fetchall()
                    column_names = [column[1] for column in columns]
                    
                    # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ current_rank –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ
                    if 'current_rank' not in column_names:
                        logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–ª–æ–Ω–∫–∏ current_rank –≤ —Ç–∞–±–ª–∏—Ü—É users")
                        await db.execute('''
                            ALTER TABLE users 
                            ADD COLUMN current_rank TEXT DEFAULT "üîç –ò—Å–∫–∞—Ç–µ–ª—å"
                        ''')
                        await db.commit()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–ª–æ–Ω–∫–∏ current_rank: {e}")
                
                # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                await db.execute(
                    '''
                CREATE TABLE IF NOT EXISTS activity (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    chat_id INTEGER,
                    user_id INTEGER,
                    message_type TEXT,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    points REAL DEFAULT 0,
                    FOREIGN KEY (chat_id) REFERENCES chats (chat_id),
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            '''
                )
                
                # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞–Ω–≥–æ–≤
                await db.execute(
                    '''
                CREATE TABLE IF NOT EXISTS ranks (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT UNIQUE,
                    min_points INTEGER,
                    max_points INTEGER
                )
            '''
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–Ω—è
                await db.execute(
                    '''
                CREATE TABLE IF NOT EXISTS daily_questions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    chat_id INTEGER,
                    message_id INTEGER,
                    question TEXT,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (chat_id) REFERENCES chats (chat_id)
                )
            '''
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
                await db.execute(
                    '''
                CREATE TABLE IF NOT EXISTS question_responses (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    question_id INTEGER,
                    user_id INTEGER,
                    points_awarded REAL DEFAULT 0,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (question_id) REFERENCES daily_questions (id),
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            '''
                )
                
                # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥–∏
                await db.execute('DELETE FROM ranks')
                # –£—Ä–æ–≤–µ–Ω—å 1: 0-99 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üîç –ò—Å–∫–∞—Ç–µ–ª—å', 0, 99))
                # –£—Ä–æ–≤–µ–Ω—å 2: 100-249 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üë£ –ü—É—Ç–Ω–∏–∫', 100, 249))
                # –£—Ä–æ–≤–µ–Ω—å 3: 250-499 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üìö –£—á–µ–Ω–∏–∫', 250, 499))
                # –£—Ä–æ–≤–µ–Ω—å 4: 500-749 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('‚öîÔ∏è –í–æ–∏–Ω —á–∞—Ç–∞', 500, 749))
                # –£—Ä–æ–≤–µ–Ω—å 5: 750-999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üßô –ü–æ–¥–º–∞—Å—Ç–µ—Ä—å–µ', 750, 999))
                # –£—Ä–æ–≤–µ–Ω—å 6: 1000-1499 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üèπ –°–ª–µ–¥–æ–ø—ã—Ç', 1000, 1499))
                # –£—Ä–æ–≤–µ–Ω—å 7: 1500-1999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üõ°Ô∏è –ó–∞—â–∏—Ç–Ω–∏–∫', 1500, 1999))
                # –£—Ä–æ–≤–µ–Ω—å 8: 2000-2499 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üîÆ –ú–∏—Å—Ç–∏–∫', 2000, 2499))
                # –£—Ä–æ–≤–µ–Ω—å 9: 2500-2999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üß† –ú—É–¥—Ä–µ—Ü', 2500, 2999))
                # –£—Ä–æ–≤–µ–Ω—å 10: 3000-3499 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('‚ö° –≠–ª–µ–º–µ–Ω—Ç–∞–ª–∏—Å—Ç', 3000, 3499))
                # –£—Ä–æ–≤–µ–Ω—å 11: 3500-3999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üåô –ù–æ—á–Ω–æ–π –∫–ª–∏–Ω–æ–∫', 3500, 3999))
                # –£—Ä–æ–≤–µ–Ω—å 12: 4000-4499 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üåø –•—Ä–∞–Ω–∏—Ç–µ–ª—å —Ä–æ—â–∏', 4000, 4499))
                # –£—Ä–æ–≤–µ–Ω—å 13: 4500-4999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('‚õèÔ∏è –ú–∞—Å—Ç–µ—Ä-–∫—É–∑–Ω–µ—Ü', 4500, 4999))
                # –£—Ä–æ–≤–µ–Ω—å 14: 5000-5999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üêâ –£–∫—Ä–æ—Ç–∏—Ç–µ–ª—å –¥—Ä–∞–∫–æ–Ω–æ–≤', 5000, 5999))
                # –£—Ä–æ–≤–µ–Ω—å 15: 6000-6999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üßù –î—Ä–µ–≤–Ω–∏–π —ç–ª—å—Ñ', 6000, 6999))
                # –£—Ä–æ–≤–µ–Ω—å 16: 7000-7999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üåã –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –æ–≥–Ω—è', 7000, 7999))
                # –£—Ä–æ–≤–µ–Ω—å 17: 8000-8999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('‚ùÑÔ∏è –•–æ–∑—è–∏–Ω –ª—å–¥–∞', 8000, 8999))
                # –£—Ä–æ–≤–µ–Ω—å 18: 9000-9999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üå™Ô∏è –í–ª–∞—Å—Ç–µ–ª–∏–Ω –±—É—Ä–∏', 9000, 9999))
                # –£—Ä–æ–≤–µ–Ω—å 19: 10000-11999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üè∞ –ö–æ–º–∞–Ω–¥–∏—Ä –∫—Ä–µ–ø–æ—Å—Ç–∏', 10000, 11999))
                # –£—Ä–æ–≤–µ–Ω—å 20: 12000-13999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üëë –ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏', 12000, 13999))
                # –£—Ä–æ–≤–µ–Ω—å 21: 14000-15999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üíé –°–æ–±–∏—Ä–∞—Ç–µ–ª—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤', 14000, 15999))
                # –£—Ä–æ–≤–µ–Ω—å 22: 16000-19999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üåü –ó–≤–µ–∑–¥–Ω—ã–π –º–∞–≥', 16000, 19999))
                # –£—Ä–æ–≤–µ–Ω—å 23: 20000-23999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üî± –ú–æ—Ä—Å–∫–æ–π –≤–ª–∞–¥—ã–∫–∞', 20000, 23999))
                # –£—Ä–æ–≤–µ–Ω—å 24: 24000-27999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('‚öúÔ∏è –ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π —Ä—ã—Ü–∞—Ä—å', 24000, 27999))
                # –£—Ä–æ–≤–µ–Ω—å 25: 28000-31999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üßø –•—Ä–∞–Ω–∏—Ç–µ–ª—å —Ç–∞–π–Ω', 28000, 31999))
                # –£—Ä–æ–≤–µ–Ω—å 26: 32000-35999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üåì –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å —Ç–µ–Ω–µ–π', 32000, 35999))
                # –£—Ä–æ–≤–µ–Ω—å 27: 36000-39999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('‚òÄÔ∏è –°–æ–ª–Ω–µ—á–Ω—ã–π —á–µ–º–ø–∏–æ–Ω', 36000, 39999))
                # –£—Ä–æ–≤–µ–Ω—å 28: 40000-44999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('ü¶Ö –ù–µ–±–µ—Å–Ω—ã–π —Å—Ç—Ä–∞–∂', 40000, 44999))
                # –£—Ä–æ–≤–µ–Ω—å 29: 45000-49999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('ü¶Å –í–æ–∏–Ω —Å–≤–µ—Ç–∞', 45000, 49999))
                # –£—Ä–æ–≤–µ–Ω—å 30: 50000-59999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üèÜ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –≥–µ—Ä–æ–π', 50000, 59999))
                # –£—Ä–æ–≤–µ–Ω—å 31: 60000-69999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üëÅÔ∏è –í—Å–µ–≤–∏–¥—è—â–∏–π', 60000, 69999))
                # –£—Ä–æ–≤–µ–Ω—å 32: 70000-79999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üí´ –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–∞–Ω–Ω–∏–∫', 70000, 79999))
                # –£—Ä–æ–≤–µ–Ω—å 33: 80000-89999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üåà –•—Ä–∞–Ω–∏—Ç–µ–ª—å –º–∏—Ä–æ–≤', 80000, 89999))
                # –£—Ä–æ–≤–µ–Ω—å 34: 90000-99999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üßö –ë–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–π –∞—Ä—Ö–∏–º–∞–≥', 90000, 99999))
                # –£—Ä–æ–≤–µ–Ω—å 35: 100000-124999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üî• –ê–≤–∞—Ç–∞—Ä —Ñ–µ–Ω–∏–∫—Å–∞', 100000, 124999))
                # –£—Ä–æ–≤–µ–Ω—å 36: 125000-149999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üåå –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –≤—Å–µ–ª–µ–Ω–Ω–æ–π', 125000, 149999))
                # –£—Ä–æ–≤–µ–Ω—å 37: 150000-199999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('‚≠ê –ê—Å—Ç—Ä–∞–ª—å–Ω—ã–π –≤–ª–∞–¥—ã–∫–∞', 150000, 199999))
                # –£—Ä–æ–≤–µ–Ω—å 38: 200000-249999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üå† –ü–æ–∂–∏—Ä–∞—Ç–µ–ª—å –∑–≤–µ–∑–¥', 200000, 249999))
                # –£—Ä–æ–≤–µ–Ω—å 39: 250000-299999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('‚ö° –•—Ä–∞–Ω–∏—Ç–µ–ª—å –≤–µ—á–Ω–æ—Å—Ç–∏', 250000, 299999))
                # –£—Ä–æ–≤–µ–Ω—å 40: 300000-399999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üí´ –¢–≤–æ—Ä–µ—Ü —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏', 300000, 399999))
                # –£—Ä–æ–≤–µ–Ω—å 41: 400000-499999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üåû –°–æ–ª–Ω—Ü–µ–ª–∏–∫–∏–π', 400000, 499999))
                # –£—Ä–æ–≤–µ–Ω—å 42: 500000-749999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üåë –õ—É–Ω–Ω—ã–π –æ—Ä–∞–∫—É–ª', 500000, 749999))
                # –£—Ä–æ–≤–µ–Ω—å 43: 750000-999999 –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('üåÄ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –≤—Ä–µ–º–µ–Ω–∏', 750000, 999999))
                # –£—Ä–æ–≤–µ–Ω—å 44: 1000000+ –æ—á–∫–æ–≤
                await db.execute('INSERT INTO ranks (name, min_points, max_points) VALUES (?, ?, ?)', ('‚ú® –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å', 1000000, 1000000000))
                
                await db.commit()
                logger.debug("–¢–∞–±–ª–∏—Ü—ã –∏ —Ä–∞–Ω–≥–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
    
    async def add_chat(self, chat_id, title):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ –≤ –±–∞–∑—É"""
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute(
                'INSERT OR IGNORE INTO chats (chat_id, title) VALUES (?, ?)',
                (chat_id, title)
            )
            await db.commit()
    
    async def add_user(self, user_id, username, first_name, last_name):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –¥–∞–Ω–Ω—ã–µ"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                cursor = await db.execute(
                    'SELECT user_id, current_rank FROM users WHERE user_id = ?',
                    (user_id,)
                )
                existing_user = await cursor.fetchone()
                
                if existing_user:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await db.execute(
                        'UPDATE users SET username = ?, first_name = ?, last_name = ? WHERE user_id = ?',
                        (username, first_name, last_name, user_id)
                    )
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è current_rank
                    if len(existing_user) < 2 or existing_user[1] is None:
                        # –î–æ–±–∞–≤–ª—è–µ–º current_rank, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                        await db.execute(
                            'UPDATE users SET current_rank = ? WHERE user_id = ?',
                            ('üîç –ò—Å–∫–∞—Ç–µ–ª—å', user_id)
                        )
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await db.execute(
                        'INSERT INTO users (user_id, username, first_name, last_name, current_rank) VALUES (?, ?, ?, ?, ?)',
                        (user_id, username, first_name, last_name, 'üîç –ò—Å–∫–∞—Ç–µ–ª—å')
                    )
                
                await db.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def add_activity(self, chat_id, user_id, message_type, points):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                await db.execute(
                    'INSERT INTO activity (chat_id, user_id, message_type, points) VALUES (?, ?, ?, ?)',
                    (chat_id, user_id, message_type, points)
                )
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor = await db.execute(
                    'SELECT current_rank FROM users WHERE user_id = ?',
                    (user_id,)
                )
                result = await cursor.fetchone()
                current_rank = result[0] if result and result[0] else "üîç –ò—Å–∫–∞—Ç–µ–ª—å"
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor = await db.execute(
                    'SELECT SUM(points) FROM activity WHERE user_id = ?',
                    (user_id,)
                )
                total_points = (await cursor.fetchone())[0] or 0
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—á–∫–æ–≤
                cursor = await db.execute(
                    'SELECT name FROM ranks WHERE ? BETWEEN min_points AND max_points',
                    (total_points,)
                )
                new_rank_result = await cursor.fetchone()
                new_rank = new_rank_result[0] if new_rank_result else "üîç –ò—Å–∫–∞—Ç–µ–ª—å"
                
                # –ï—Å–ª–∏ —Ä–∞–Ω–≥ –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑–µ
                if current_rank != new_rank:
                    await db.execute(
                        'UPDATE users SET current_rank = ? WHERE user_id = ?',
                        (new_rank, user_id)
                    )
                    await db.commit()
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Ä–∞–Ω–≥–∞
                    return {
                        "is_rank_up": True,
                        "old_rank": current_rank,
                        "new_rank": new_rank,
                        "total_points": total_points
                    }
                
                await db.commit()
                return {"is_rank_up": False}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return {"is_rank_up": False}
    
    async def add_game_activity(self, chat_id, user_id, game_type, points):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –±–∞–ª–ª—ã –∑–∞ –∏–≥—Ä–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (emoji_game, quiz)"""
        try:
            # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ —á–∞—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ
            await self.add_chat(chat_id, "–ò–≥—Ä–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
            await self.add_user(user_id, None, "–ò–≥—Ä–æ–∫", None)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–Ω–≥
            rank_info = await self.add_activity(chat_id, user_id, game_type, points)
                
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {points} –±–∞–ª–ª–æ–≤ –∑–∞ –∏–≥—Ä—É {game_type} –≤ —á–∞—Ç–µ {chat_id}")
            return True, rank_info
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤ –∑–∞ –∏–≥—Ä—É: {e}")
            return False, {"is_rank_up": False}
    
    async def get_user_stats(self, chat_id, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —á–∞—Ç–µ"""
        async with aiosqlite.connect(self.db_path) as db:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            cursor = await db.execute(
                'SELECT COUNT(*) FROM activity WHERE chat_id = ? AND user_id = ?',
                (chat_id, user_id)
            )
            total_messages = (await cursor.fetchone())[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤
            cursor = await db.execute(
                'SELECT SUM(points) FROM activity WHERE chat_id = ? AND user_id = ?',
                (chat_id, user_id)
            )
            total_points = (await cursor.fetchone())[0] or 0
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥
            cursor = await db.execute(
                'SELECT name FROM ranks WHERE ? BETWEEN min_points AND max_points',
                (total_points,)
            )
            rank_result = await cursor.fetchone()
            rank = rank_result[0] if rank_result else "–ë–µ–∑ —Ä–∞–Ω–≥–∞"
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            cursor = await db.execute(
                'SELECT MAX(timestamp) FROM activity WHERE chat_id = ? AND user_id = ?',
                (chat_id, user_id)
            )
            last_active = (await cursor.fetchone())[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞–Ω–≥–µ
            cursor = await db.execute(
                'SELECT name, min_points FROM ranks WHERE min_points > ? ORDER BY min_points ASC LIMIT 1',
                (total_points,)
            )
            next_rank_result = await cursor.fetchone()
            if next_rank_result:
                next_rank = {
                    "name": next_rank_result[0],
                    "min_points": next_rank_result[1],
                    "points_left": next_rank_result[1] - total_points
                }
            else:
                next_rank = None
            
            return {
                "total_messages": total_messages,
                "total_points": total_points,
                "rank": rank,
                "last_active": last_active,
                "next_rank": next_rank
            }

    async def get_rank_by_points(self, points):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–Ω–≥ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—á–∫–æ–≤"""
        async with aiosqlite.connect(self.db_path) as db:
            cursor = await db.execute(
                'SELECT name FROM ranks WHERE ? BETWEEN min_points AND max_points',
                (points,)
            )
            rank_result = await cursor.fetchone()
            return rank_result[0] if rank_result else "–ë–µ–∑ —Ä–∞–Ω–≥–∞"
    
    async def get_top_users(self, chat_id, limit=10):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ"""
        async with aiosqlite.connect(self.db_path) as db:
            cursor = await db.execute('''
                SELECT u.user_id, u.username, u.first_name, u.last_name, SUM(a.points) as total_points, COUNT(a.id) as total_messages
                FROM activity a
                JOIN users u ON a.user_id = u.user_id
                WHERE a.chat_id = ?
                GROUP BY a.user_id
                ORDER BY total_points DESC
                LIMIT ?
            ''', (chat_id, limit))
            
            return await cursor.fetchall()
    
    async def get_inactive_users(self, chat_id, days=3):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ"""
        cutoff_date = datetime.datetime.now() - datetime.timedelta(days=days)
        cutoff_str = cutoff_date.strftime('%Y-%m-%d %H:%M:%S')
        
        async with aiosqlite.connect(self.db_path) as db:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–≥–¥–∞-–ª–∏–±–æ –ø–∏—Å–∞–ª–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
            cursor = await db.execute('''
                SELECT DISTINCT u.user_id, u.username, u.first_name, u.last_name, MAX(a.timestamp) as last_active
                FROM users u
                JOIN activity a ON u.user_id = a.user_id
                WHERE a.chat_id = ?
                GROUP BY u.user_id
                HAVING last_active < ?
                ORDER BY last_active ASC
            ''', (chat_id, cutoff_str))
            
            return await cursor.fetchall()
    
    async def get_all_chats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤, –≥–¥–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –±–æ—Ç"""
        async with aiosqlite.connect(self.db_path) as db:
            cursor = await db.execute('''
                SELECT chat_id, title FROM chats
                WHERE chat_id < 0  -- –¢–æ–ª—å–∫–æ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã (ID < 0)
                ORDER BY joined_date DESC
            ''')
            
            return await cursor.fetchall()
    
    async def get_chat_activity_report(self, chat_id, days=7):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—á–µ—Ç –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        start_date = datetime.datetime.now() - datetime.timedelta(days=days)
        start_date_str = start_date.strftime('%Y-%m-%d %H:%M:%S')
        
        async with aiosqlite.connect(self.db_path) as db:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
            cursor = await db.execute('''
                SELECT COUNT(*) as message_count, 
                       SUM(points) as total_points,
                       COUNT(DISTINCT user_id) as active_users
                FROM activity
                WHERE chat_id = ? AND timestamp > ?
            ''', (chat_id, start_date_str))
            
            activity_summary = await cursor.fetchone()
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –¥–Ω—è–º
            cursor = await db.execute('''
                SELECT date(timestamp) as day, COUNT(*) as message_count
                FROM activity
                WHERE chat_id = ? AND timestamp > ?
                GROUP BY day
                ORDER BY day
            ''', (chat_id, start_date_str))
            
            daily_activity = await cursor.fetchall()
            
            return {
                'message_count': activity_summary[0] or 0,
                'total_points': activity_summary[1] or 0,
                'active_users': activity_summary[2] or 0,
                'daily_activity': daily_activity
            }
    
    async def get_most_active_user_today(self, chat_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–∞–º–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"""
        start_date = datetime.datetime.now() - datetime.timedelta(days=1)
        start_date_str = start_date.strftime('%Y-%m-%d %H:%M:%S')
        
        async with aiosqlite.connect(self.db_path) as db:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–∞–ª–ª–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            cursor = await db.execute('''
                SELECT u.user_id, u.username, u.first_name, u.last_name, 
                       COUNT(a.id) as message_count, SUM(a.points) as total_points
                FROM activity a
                JOIN users u ON a.user_id = u.user_id
                WHERE a.chat_id = ? AND a.timestamp > ?
                GROUP BY u.user_id
                ORDER BY total_points DESC
                LIMIT 1
            ''', (chat_id, start_date_str))
            
            result = await cursor.fetchone()
            
            if not result:
                return None
                
            return {
                'user_id': result[0],
                'username': result[1],
                'first_name': result[2],
                'last_name': result[3],
                'message_count': result[4],
                'total_points': result[5]
            }
    
    async def save_question_message_id(self, chat_id, message_id, question):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º –¥–Ω—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute(
                    'INSERT INTO daily_questions (chat_id, message_id, question) VALUES (?, ?, ?)',
                    (chat_id, message_id, question)
                )
                await db.commit()
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º –¥–Ω—è: {message_id} –≤ —á–∞—Ç–µ {chat_id}")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º: {e}")
            return False
    
    async def check_if_response_to_question(self, chat_id, reply_to_message_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å –¥–Ω—è"""
        if not reply_to_message_id:
            return None
            
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –ò—â–µ–º –≤–æ–ø—Ä–æ—Å –¥–Ω—è —Å —Ç–∞–∫–∏–º message_id
                cursor = await db.execute(
                    'SELECT id, question FROM daily_questions WHERE chat_id = ? AND message_id = ?',
                    (chat_id, reply_to_message_id)
                )
                result = await cursor.fetchone()
                
                if result:
                    return {
                        'question_id': result[0],
                        'question_text': result[1]
                    }
                return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {e}")
            return None
    
    async def add_question_response(self, question_id, user_id, points=2.0):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ–± –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –¥–Ω—è –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –±–∞–ª–ª—ã"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–≤–µ—á–∞–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
                cursor = await db.execute(
                    'SELECT id FROM question_responses WHERE question_id = ? AND user_id = ?',
                    (question_id, user_id)
                )
                existing = await cursor.fetchone()
                
                if existing:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–≤–µ—á–∞–ª –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å
                    return False, 0
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ—Ç–≤–µ—Ç–µ
                await db.execute(
                    'INSERT INTO question_responses (question_id, user_id, points_awarded) VALUES (?, ?, ?)',
                    (question_id, user_id, points)
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                cursor = await db.execute(
                    'SELECT chat_id FROM daily_questions WHERE id = ?',
                    (question_id,)
                )
                chat_result = await cursor.fetchone()
                
                if not chat_result:
                    await db.commit()
                    return False, 0
                    
                chat_id = chat_result[0]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                rank_info = await self.add_activity(chat_id, user_id, "question_response", points)
                
                await db.commit()
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª {points} –±–∞–ª–ª–æ–≤ –∑–∞ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –¥–Ω—è")
                return True, points
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {e}")
            return False, 0
    
    async def get_question_stats(self, chat_id, limit=5):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –¥–Ω—è –≤ —á–∞—Ç–µ"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –Ω–∏—Ö
                cursor = await db.execute('''
                    SELECT 
                        q.id, 
                        q.question, 
                        q.timestamp, 
                        COUNT(r.id) as response_count,
                        SUM(r.points_awarded) as total_points
                    FROM daily_questions q
                    LEFT JOIN question_responses r ON q.id = r.question_id
                    WHERE q.chat_id = ?
                    GROUP BY q.id
                    ORDER BY q.timestamp DESC
                    LIMIT ?
                ''', (chat_id, limit))
                
                questions = await cursor.fetchall()
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                results = []
                for q in questions:
                    question_id, question_text, timestamp, response_count, total_points = q
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    cursor = await db.execute('''
                        SELECT u.user_id, u.first_name, u.last_name, u.username
                        FROM question_responses r
                        JOIN users u ON r.user_id = u.user_id
                        WHERE r.question_id = ?
                        LIMIT 5
                    ''', (question_id,))
                    
                    participants = []
                    async for user_row in cursor:
                        user_id, first_name, last_name, username = user_row
                        name = first_name
                        if last_name:
                            name += f" {last_name}"
                        if username:
                            name += f" (@{username})"
                        participants.append(name)
                    
                    # –°–æ–∫—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                    short_question = question_text
                    if len(short_question) > 40:
                        short_question = short_question[:37] + "..."
                    
                    results.append({
                        'id': question_id,
                        'question': short_question,
                        'full_question': question_text,
                        'timestamp': timestamp,
                        'response_count': response_count or 0,
                        'total_points': total_points or 0,
                        'participants': participants
                    })
                
                return results
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
            return []

    async def get_last_activity_time(self, chat_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —á–∞—Ç–µ"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                cursor = await db.execute(
                    'SELECT MAX(timestamp) FROM activity WHERE chat_id = ?',
                    (chat_id,)
                )
                result = await cursor.fetchone()
                return result[0] if result and result[0] else None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return None
    
    async def get_random_chat_users(self, chat_id, limit=5):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —á–∞—Ç–∞"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–∏—Å–∞–ª–∏ –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ
                cursor = await db.execute('''
                    SELECT DISTINCT u.user_id, u.username, u.first_name, u.last_name
                    FROM users u
                    JOIN activity a ON u.user_id = a.user_id
                    WHERE a.chat_id = ? AND u.username IS NOT NULL
                    ORDER BY RANDOM()
                    LIMIT ?
                ''', (chat_id, limit))
                
                return await cursor.fetchall()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []


# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async def init_db():
    await db.create_tables()

if __name__ == "__main__":
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    asyncio.run(init_db()) 